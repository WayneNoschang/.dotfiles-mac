gui: # Config relating to the Lazygit UI
  scrollHeight: 2 # The number of lines you scroll by when scrolling the main window
  scrollPastBottom: true # If true, allow scrolling past the bottom of the content in the main window
  scrollOffMargin: 2 # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#scroll-off-margin
  scrollOffBehavior: margin # One of: 'margin' (default) | 'jump'

  mouseEvents: true # When mouse events are captured, it's a little harder to select text: e.g. requiring you to hold the option key when on macOS.

  skipDiscardChangeWarning: false # If true, do not show a warning when discarding changes in the staging view.
  skipStashWarning: false # If true, do not show warning when applying/popping the stash
  skipNoStagedFilesWarning: false # If true, do not show a warning when attempting to commit without any staged files; instead stage all unstaged files.
  skipRewordInEditorWarning: false # If true, do not show a warning when rewording a commit via an external editor

  # Fraction of the total screen width to use for the left side section. You may want to pick a small number (e.g. 0.2) if you're using a narrow screen, so that you can see more of the main section.
  sidePanelWidth: 0.3333 # Number from 0 to 1.0.

  expandFocusedSidePanel: true # If true, increase the height of the focused side window; creating an accordion effect.
  expandedSidePanelWeight: 2 # The weight of the expanded side panel, relative to the other panels. 2 means twice as tall as the other panels. Only relevant if `expandFocusedSidePanel` is true.

  # Sometimes the main window is split in two (e.g. when the selected file has both staged and unstaged changes). This setting controls how the two sections are split. Options are:
  # - 'horizontal': split the window horizontally
  # - 'vertical': split the window vertically
  # - 'flexible': (default) split the window horizontally if the window is wide enough, otherwise split vertically
  mainPanelSplitMode: flexible

  # How the window is split when in half screen mode (i.e. after hitting '+' once). Possible values:
  # - 'left': split the window horizontally (side panel on the left, main view on the right)
  # - 'top': split the window vertically (side panel on top, main view below)
  enlargedSideViewLocation: left

  language: auto # One of 'auto' (default) | 'en' | 'zh-CN' | 'zh-TW' | 'pl' | 'nl' | 'ja' | 'ko' | 'ru'
  timeFormat: 02 Jan 06 # Format used when displaying time e.g. commit time. Uses Go's time format syntax: https://pkg.go.dev/time#Time.Format
  shortTimeFormat: 3:04PM # Format used when displaying time if the time is less than 24 hours ago. Uses Go's time format syntax: https://pkg.go.dev/time#Time.Format

  theme: # Config relating to colors and styles. See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#color-attributes
    activeBorderColor: # Border color of focused window
      - default
      - bold

    inactiveBorderColor: # Border color of non-focused windows
      - default

    searchingActiveBorderColor: # Border color of focused window when searching in that window
      - yellow
      - bold

    optionsTextColor: # Color of keybindings help text in the bottom line
      - default

    selectedLineBgColor: # Background color of selected line. See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#highlighting-the-selected-line
      - default

    inactiveViewSelectedLineBgColor: # Background color of selected line when view doesn't have focus.
      - bold

    cherryPickedCommitFgColor: # Foreground color of copied commit
      - blue

    cherryPickedCommitBgColor: # Background color of copied commit
      - default

    markedBaseCommitFgColor: # Foreground color of marked base commit (for rebase)
      - blue

    markedBaseCommitBgColor: # Background color of marked base commit (for rebase)
      - default

    unstagedChangesColor: # Color for file with unstaged changes
      - red

    defaultFgColor: # Default text color
      - default

  commitLength: # Config relating to the commit length indicator
    show: true # If true, show an indicator of commit message length

  showListFooter: true # If true, show the '5 of 20' footer at the bottom of list views
  showFileTree: true # If true, display the files in the file views as a tree. If false, display the files as a flat list. This can be toggled from within Lazygit with the '~' key, but that will not change the default.
  showNumstatInFilesView: false # If true, show the number of lines changed per file in the Files view

  showRandomTip: true # If true, show a random tip in the command log when Lazygit starts
  showCommandLog: true # If true, show the command log
  showBottomLine: true # If true, show the bottom line that contains keybinding info and useful buttons. If false, this line will be hidden except to display a loader for an in-progress action.
  showPanelJumps: true # If true, show jump-to-window keybindings in window titles.

  nerdFontsVersion: "3" # Nerd fonts version to use. If empty, do not show icons. One of: '2' | '3' | empty string (default)
  showFileIcons: true # If true (default), file icons are shown in the file views. Only relevant if NerdFontsVersion is not empty.

  commitAuthorShortLength: 0 # Length of author name in (non-expanded) commits view. 2 means show initials only.
  commitAuthorLongLength: 2 # Length of author name in expanded commits view. 2 means show initials only.
  commitHashLength: 0 # Length of commit hash in commits view. 0 shows '*' if NF icons aren't on.
  showBranchCommitHash: false # If true, show commit hashes alongside branch names in the branches view.

  showDivergenceFromBaseBranch: none # Whether to show the divergence from the base branch in the branches view. One of: 'none' | 'onlyArrow'  | 'arrowAndNumber'

  commandLogSize: 5 # Height of the command log view

  # Whether to split the main window when viewing file changes. If 'auto', only split the main window when a file has both staged and unstaged changes
  splitDiff: auto # One of: 'auto' | 'always'

  # Default size for focused window. Window size can be changed from within Lazygit with '+' and '_' (but this won't change the default).
  windowSize: normal # One of: 'normal' (default) | 'half' | 'full'

  border: rounded # Window border style. One of 'rounded' (default) | 'single' | 'double' | 'hidden'
  animateExplosion: true # If true, show a seriously epic explosion animation when nuking the working tree.
  portraitMode: auto # Whether to stack UI components on top of each other. One of 'auto' (default) | 'always' | 'never'

  filterMode: substring # How things are filtered when typing '/'. One of 'substring' (default) | 'fuzzy'

  # Config relating to the spinner.
  spinner:
    # The frames of the spinner animation.
    frames:
      - '|'
      - /
      - '-'
      - \

    rate: 50 # The "speed" of the spinner in milliseconds.

  statusPanelView: dashboard # Status panel view. One of 'dashboard' (default) | 'allBranchesLog'

  switchToFilesAfterStashPop: true # If true, jump to the Files panel after popping a stash
  switchToFilesAfterStashApply: true # If true, jump to the Files panel after applying a stash
  switchTabsWithPanelJumpKeys: false # If true, when using the panel jump keys (default 1 through 5) and target panel is already active, go to next tab instead

###################################################################################################################################

git: # Config relating to git
  paging: # See https://github.com/jesseduffield/lazygit/blob/master/docs/Custom_Pagers.md
    colorArg: always # Value of the --color arg in the git diff command. Some pagers want this to be set to 'always' and some want it set to 'never'

    # e.g.
    # diff-so-fancy
    # delta --dark --paging=never
    # ydiff -p cat -s --wrap --width={{columnWidth}}
    pager: ""
    useConfig: false # If true, Lazygit will use whatever pager is specified in `$GIT_PAGER`, `$PAGER`, or your *git config*. If the pager ends with something like ` | less` we will strip that part out, because less doesn't play nice with our rendering approach. If the custom pager uses less under the hood, that will also break rendering (hence the `--paging=never` flag for the `delta` pager).
    externalDiffCommand: "" # e.g. 'difft --color=always'

  # Config relating to committing
  commit:
    signOff: false # If true, pass '--signoff' flag when committing
    autoWrapCommitMessage: true # Automatic WYSIWYG wrapping of the commit message as you type
    autoWrapWidth: 72 # If autoWrapCommitMessage is true, the width to wrap to

  merging: # Config relating to merging
    manualCommit: false # If true, run merges in a subprocess so that if a commit message is required, Lazygit will not hang. Only applicable to unix users.
    args: "" # Extra args passed to `git merge`, e.g. --no-ff
    squashMergeMessage: Squash merge {{selectedRef}} into {{currentBranch}} # The commit message to use for a squash merge commit. Can contain "{{selectedRef}}" and "{{currentBranch}}" placeholders.

  mainBranches: # list of branches that are considered 'main' branches, used when displaying commits
    - master
    - main

  skipHookPrefix: WIP # Prefix to use when skipping hooks. E.g. if set to 'WIP', then pre-commit hooks will be skipped when the commit message starts with 'WIP'
  autoFetch: true # If true, periodically fetch from remote
  autoRefresh: true # If true, periodically refresh files and submodules
  fetchAll: true # If true, pass the --all arg to git fetch

  # If true, lazygit will automatically stage files that used to have merge
  # conflicts but no longer do; and it will also ask you if you want to
  # continue a merge or rebase if you've resolved all conflicts. If false, it
  # won't do either of these things.
  autoStageResolvedConflicts: true

  # Command used when displaying the current branch git log in the main window
  branchLogCmd: git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --

  # Command used to display git log of all branches in the main window.
  # Deprecated: Use `allBranchesLogCmds` instead.
  allBranchesLogCmd: git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium

  overrideGpg: false # If true, do not spawn a separate process when using GPG

  disableForcePushing: false # If true, do not allow force pushes

  commitPrefix: # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#predefined-commit-message-prefix
    pattern: "" # pattern to match on. E.g. for 'feature/AB-123' to match on the AB-123 use "^\\w+\\/(\\w+-\\w+).*"
    replace: "" # Replace directive. E.g. for 'feature/AB-123' to start the commit message with 'AB-123 ' use "[$1] "

  branchPrefix: "" # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#predefined-branch-name-prefix
  parseEmoji: false # If true, parse emoji strings in commit messages e.g. render :rocket: as 🚀

  log: # Config for showing the log in the commits view
    # One of: 'date-order' | 'author-date-order' | 'topo-order' | 'default'
    # 'topo-order' makes it easier to read the git log graph, but commits may not
    # appear chronologically. See https://git-scm.com/docs/
    showWholeGraph: false # displays the whole git graph by default in the commits view (equivalent to passing the `--all` argument to `git log`)
  truncateCopiedCommitHashesTo: 12 # When copying commit hashes to the clipboard, truncate them to this length. Set to 40 to disable truncation.

update: # Periodic update checks
  method: prompt # One of: 'prompt' (default) | 'background' | 'never'
  days: 14 # Period in days between update checks

refresher: # Background refreshes
  refreshInterval: 10 # File/submodule refresh interval in seconds. Auto-refresh can be disabled via option 'git.autoRefresh'.
  fetchInterval: 60 # Re-fetch interval in seconds. Auto-fetch can be disabled via option 'git.autoFetch'.

confirmOnQuit: false # If true, show a confirmation popup before quitting Lazygit
quitOnTopLevelReturn: false # If true, exit Lazygit when the user presses escape in a context where there is nothing to cancel/close

###################################################################################################################################

# Config relating to things outside of Lazygit like how files are opened, copying to clipboard, etc
os:
  edit: "" # Command for editing a file. Should contain "{{filename}}".
  editAtLine: "" # Command for editing a file at a given line number. Should contain "{{filename}}", and may optionally contain "{{line}}".
  editAtLineAndWait: "" # Same as EditAtLine, except that the command needs to wait until the window is closed.
  openDirInEditor: "" # For opening a directory in an editor
  editPreset: "nvim" # A built-in preset that sets all of the above settings. Supported presets are defined in the getPreset function in editor_presets.go.
  open: "" # Command for opening a file, as if the file is double-clicked. Should contain "{{filename}}", but doesn't support "{{line}}".
  openLink: "" # Command for opening a link. Should contain "{{link}}".

  # EditCommand is the command for editing a file.
  # Deprecated: use Edit instead. Note that semantics are different:
  # EditCommand is just the command itself, whereas Edit contains a
  # "{{filename}}" variable.
  editCommand: ""

  # CopyToClipboardCmd is the command for copying to clipboard.
  copyToClipboardCmd: "" # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#custom-command-for-copying-to-and-pasting-from-clipboard

  # ReadFromClipboardCmd is the command for reading the clipboard.
  readFromClipboardCmd: "" # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#custom-command-for-copying-to-and-pasting-from-clipboard

disableStartupPopups: false # If true, don't display introductory popups upon opening Lazygit.

# What to do when opening Lazygit outside of a git repo.
# - 'prompt': (default) ask whether to initialize a new repo or open in the most recent repo
# - 'create': initialize a new repo
# - 'skip': open most recent repo
# - 'quit': exit Lazygit
notARepository: prompt

promptToReturnFromSubprocess: true # If true, display a confirmation when subprocess terminates. This allows you to view the output of the subprocess before returning to Lazygit.

###################################################################################################################################

# Keybindings
keybinding:
  universal:
    quit: q
    quit-alt1: <c-c>
    return: <esc>
    quitWithoutChangingDirectory: Q
    togglePanel: <tab>
    prevItem: <up>
    nextItem: <down>
    prevItem-alt: k
    nextItem-alt: j
    prevPage: ','
    nextPage: .
    scrollLeft: H
    scrollRight: L
    gotoTop: <
    gotoBottom: '>'
    toggleRangeSelect: v
    rangeSelectDown: <s-down>
    rangeSelectUp: <s-up>
    prevBlock: <left>
    nextBlock: <right>
    prevBlock-alt: h
    nextBlock-alt: l
    nextBlock-alt2: <tab>
    prevBlock-alt2: <backtab>
    jumpToBlock:
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
    nextMatch: "n"
    prevMatch: "N"
    startSearch: /
    optionMenu: <disabled>
    optionMenu-alt1: '?'
    select: <space>
    goInto: <enter>
    confirm: <enter>
    confirmInEditor: <a-enter>
    remove: d
    new: "n"
    edit: e
    openFile: o
    scrollUpMain: <pgup>
    scrollDownMain: <pgdown>
    scrollUpMain-alt1: K
    scrollDownMain-alt1: J
    scrollUpMain-alt2: <c-u>
    scrollDownMain-alt2: <c-d>
    executeShellCommand: ':'
    createRebaseOptionsMenu: m

    # 'Files' appended for legacy reasons
    pushFiles: P

    # 'Files' appended for legacy reasons
    pullFiles: p
    refresh: R
    createPatchOptionsMenu: <c-p>
    nextTab: ']'
    prevTab: '['
    nextScreenMode: +
    prevScreenMode: _
    undo: z
    redo: <c-z>
    filteringMenu: <c-s>
    diffingMenu: W
    diffingMenu-alt: <c-e>
    copyToClipboard: <c-o>
    openRecentRepos: <c-r>
    submitEditorText: <enter>
    extrasMenu: '@'
    toggleWhitespaceInDiffView: <c-w>
    increaseContextInDiffView: '}'
    decreaseContextInDiffView: '{'
    increaseRenameSimilarityThreshold: )
    decreaseRenameSimilarityThreshold: (
    openDiffTool: <c-t>
  status:
    checkForUpdate: u
    recentRepos: <enter>
    allBranchesLogGraph: a
  files:
    commitChanges: c
    commitChangesWithoutHook: w
    amendLastCommit: A
    commitChangesWithEditor: C
    findBaseCommitForFixup: <c-f>
    confirmDiscard: x
    ignoreFile: i
    refreshFiles: r
    stashAllChanges: s
    viewStashOptions: S
    toggleStagedAll: a
    viewResetOptions: D
    fetch: f
    toggleTreeView: '`'
    openMergeTool: M
    openStatusFilter: <c-b>
    copyFileInfoToClipboard: "y"
  branches:
    createPullRequest: o
    viewPullRequestOptions: O
    copyPullRequestURL: <c-y>
    checkoutBranchByName: c
    forceCheckoutBranch: F
    rebaseBranch: r
    renameBranch: R
    mergeIntoCurrentBranch: M
    viewGitFlowOptions: i
    fastForward: f
    createTag: T
    pushTag: P
    setUpstream: u
    fetchRemote: f
    sortOrder: s
  worktrees:
    viewWorktreeOptions: w
  commits:
    squashDown: s
    renameCommit: r
    renameCommitWithEditor: R
    viewResetOptions: g
    markCommitAsFixup: f
    createFixupCommit: F
    squashAboveCommits: S
    moveDownCommit: <c-j>
    moveUpCommit: <c-k>
    amendToCommit: A
    resetCommitAuthor: a
    pickCommit: p
    revertCommit: t
    cherryPickCopy: C
    pasteCommits: V
    markCommitAsBaseForRebase: B
    tagCommit: T
    checkoutCommit: <space>
    resetCherryPick: <c-R>
    copyCommitAttributeToClipboard: "y"
    openLogMenu: <c-l>
    openInBrowser: o
    viewBisectOptions: b
    startInteractiveRebase: i
  amendAttribute:
    resetAuthor: a
    setAuthor: A
    addCoAuthor: c
  stash:
    popStash: g
    renameStash: r
  commitFiles:
    checkoutCommitFile: c
  main:
    toggleSelectHunk: a
    pickBothHunks: b
    editSelectHunk: E
  submodules:
    init: i
    update: u
    bulkMenu: b
  commitMessage:
    commitMenu: <c-o>
